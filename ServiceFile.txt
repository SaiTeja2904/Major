package edmt.dev.androidcamera2api;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.FusedLocationProviderApi;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.util.HashMap;

/**
 * Created by RANJITH on 17-10-2017.
 */

public class MyService extends Service implements GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, com.google.android.gms.location.LocationListener {
    private GoogleApiClient googleApiClient;
    private LocationRequest locationRequest;
    private FusedLocationProviderApi locationProviderApi = LocationServices.FusedLocationApi;
    static String Key;
    static int count;
    Location location;
    private DatabaseReference mDatabase,mchild;


    @Override
    public void onCreate() {
          count=0;



        /*Intent intent = new Intent(this,KillService.class);
        // Send data to NotificationView Class

        // Open NotificationView.java Activity
        PendingIntent pIntent = PendingIntent.getActivity(this, 0, intent,
                PendingIntent.FLAG_UPDATE_CURRENT);

        // Create Notification using NotificationCompat.Builder
        NotificationCompat.Builder builder = new NotificationCompat.Builder(
                this)
                // Set Icon
                .setSmallIcon(R.drawable.maps)
                // Set Ticker Message

                // Set Title
                .setContentTitle("BloodStore")
                // Set Text
                .setContentText("Click to stop sharing location")
                // Add an Action Button below Notification
                .addAction(R.drawable.maps, "Action Button", pIntent)
                // Set PendingIntent into Notification
                .setContentIntent(pIntent)
                // Dismiss Notification
                .setAutoCancel(true);

        // Create Notification Manager
        NotificationManager notificationmanager = (NotificationManager)this
                .getSystemService(Context.NOTIFICATION_SERVICE);
        // Build Notification with Notification Manager
        notificationmanager.notify(0, builder.build());*/


        //Key = intent.getStringExtra("Key");
        super.onCreate();
       //
        //
        // Toast.makeText(this, "created", Toast.LENGTH_LONG).show();

        googleApiClient = new GoogleApiClient.Builder(this)
                .addApi(LocationServices.API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .build();
        locationRequest = new LocationRequest();
        locationRequest.setInterval(60);
        locationRequest.setFastestInterval(15 * 1000);
        locationRequest.setPriority(LocationRequest.PRIORITY_LOW_POWER);
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override

    public int onStartCommand(Intent intent, int flags, int startId) {
        // Let it continue running until it is stopped.
        //Toast.makeText(this, count+"", Toast.LENGTH_LONG).show();


        SharedPreferences sp1=getSharedPreferences("Number", Context.MODE_PRIVATE);
       // Key=sp1.getString("Mobile","");
        Key="7396517722";
           // Toast.makeText(this, Key, Toast.LENGTH_LONG).show();
        googleApiClient.connect();
        return START_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        //Toast.makeText(this, "Service Destroyed", Toast.LENGTH_LONG).show();
        Handler handler = new Handler();
        handler.removeCallbacksAndMessages(null);
        googleApiClient.disconnect();
    }

    @Override
    public void onConnected(@Nullable Bundle bundle) {
        requestLocationUpdates();
    }
    private void requestLocationUpdates() {
        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "Please give permissions", Toast.LENGTH_SHORT).show();
            // TODO: Consider calling
            //    ActivityCompat#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for ActivityCompat#requestPermissions for more details.
            return;
        }
        LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);
    }

    @Override
    public void onConnectionSuspended(int i) {

    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

    }

    @Override
    public void onLocationChanged(Location location) {

        this.location=location;

        //Toast.makeText(this, "Latitude is :"+location.getLatitude(), Toast.LENGTH_SHORT).show();
        //lat.setText("Latitude is :"+location.getLatitude());
        //Toast.makeText(this, "Longitude is :"+location.getLongitude(), Toast.LENGTH_SHORT).show();
        //lon.setText("Longitude is :"+location.getLongitude());
        setDataBase(location.getLatitude(),location.getLongitude());
    }
    public void setDataBase(double lat,double lon){
    mDatabase = FirebaseDatabase.getInstance().getReference();

        //mRef= new Firebase("https://gps-tracker-22ca0.firebaseio.com/");
        mchild=mDatabase.child(Key);
      //  Log.d("")
////        Firebase mRefLat=mRef.child("Latitude");
//        mchild.child("Lat").setValue(lat);
//        //Firebase mRefLong=mRef.child("Longitude");
//        //mRefLong.setValue(lon);
//        mchild.child("Long").setValue(lon);
        HashMap<String,Object> taskMap = new HashMap<String,Object>();
        taskMap.put("Lat", lat);
        taskMap.put("Long", lon);
       mchild.updateChildren(taskMap); //shoul

    }
}

